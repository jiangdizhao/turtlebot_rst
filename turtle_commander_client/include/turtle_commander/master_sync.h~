/*********************************************************************
 *
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2016,
 *  TU Dortmund - Institute of Control Theory and Systems Engineering.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the institute nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Christoph RÃ¶smann, Stephan Kurzawe
 *********************************************************************/

#ifndef MASTER_SYNC_H_
#define MASTER_SYNC_H_

#include <ros/ros.h>
#include <ros/callback_queue.h>
#include <turtle_commander_messages/CommandService.h>
#include <bondcpp/bond.h>
#include <mutex>

namespace tcm = turtle_commander_messages;

class TurtleCommander; // forward declaration to allow processing events

class MasterSync
{
public:
  
  struct Goal
  {
      std::string name;
      bool docking;
  };
    
  
  MasterSync() {}
  
  void initialize(int turtlebot_no, TurtleCommander& turtle_commander);
  
  bool registerClient(const std::string& start_location);
  
  bool isConnected() {return _registered;}
  
  void setNewGoalFlag(bool flag) {_new_goal_flag = flag;}
    
  
  boost::optional<std::string>  requestDocking(double timeout_sec);

  bool setStateFailure();
  bool setStateReached();
  bool setStateDocking();
  
  boost::optional<MasterSync::Goal> isGoalAvailable();
  
  void startBond() {if (_bond) _bond->start();}
  void breakBond() {if (_bond) _bond->breakBond(); }
  
  
protected:
  
  /**
   * publish a command service message to the master
   * 
   * @param command  main command name
   * @param argument  supplementary command information
   * @param req_registered specify, whether this commands requires that the client is already registered
   */         
  bool sendMasterCommand(const std::string& command, const std::string& argument="", bool req_registered=true);
  
  
  /**
   * Callback for incoming command messages from the robot clients
   * 
   * @param	msg		CommandService Message
   */
  bool commandServiceCallback(tcm::CommandService::Request& req,
                              tcm::CommandService::Response& res);
  
  void onClientBoundFormedCallback();
  
  void onClientBoundBrokenCallback();


private:

  int _turtlebot_no = 1;     //!< Store the current turtlebot number
  bool _registered = false;  //!< keep track about the registration status with the master commander
  bool _initialized = false; //!< this value is true if the master sync class has already been initialized
  
  Goal _goal;
  bool _new_goal_flag = false;
  std::mutex _goal_mutex;
  
  ros::NodeHandle _nhandle = ros::NodeHandle("~");  //!< handle to the turtle_commander_master node  
//   ros::Publisher _pub_state;                        //!< publisher to send state messages to the master
  ros::ServiceClient _cmd_client;                   //!< Client for command service from master;
  ros::ServiceServer _cmd_srv;                      //!< service server for commands to master ; 
  std::unique_ptr<bond::Bond> _bond;         //!< Bond to notify the master in case this client dies
//   ros::Subscriber _sub_commands;                    //!< subsriber for the command topic
//   ros::CallbackQueue _cb_queue;                      //!< we define our own callback queue instead of using the common node queue (since we are using an asynchronous spinner in turtlecommander.cpp and want to exclude the master communication here).

    
  
TurtleCommander* _turtle_commander = nullptr;
};


#endif